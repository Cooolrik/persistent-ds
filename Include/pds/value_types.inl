// WARNING! DO NOT EDIT THIS FILE! This file is generated.

// Generated by pds - Persistent data structure framework, Copyright (c) 2022 Ulrik Lindahl
// Generator code licensed under the MIT license https://github.com/Cooolrik/pds/blob/main/LICENSE


namespace pds
{

template <> void clear_value_type<bool>( bool &type ) { type = element_type_information<bool>::zero; }
template <> void clear_value_type<optional_value<bool>>( optional_value<bool> &type ) { type.reset(); }
template <> void clear_value_type<vector<bool>>( vector<bool> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<bool>>( optional_vector<bool> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<bool>>( idx_vector<bool> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<bool>>( optional_idx_vector<bool> &type ) { type.reset(); }
template <> void clear_value_type<i8>( i8 &type ) { type = element_type_information<i8>::zero; }
template <> void clear_value_type<optional_value<i8>>( optional_value<i8> &type ) { type.reset(); }
template <> void clear_value_type<vector<i8>>( vector<i8> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i8>>( optional_vector<i8> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i8>>( idx_vector<i8> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i8>>( optional_idx_vector<i8> &type ) { type.reset(); }
template <> void clear_value_type<i16>( i16 &type ) { type = element_type_information<i16>::zero; }
template <> void clear_value_type<optional_value<i16>>( optional_value<i16> &type ) { type.reset(); }
template <> void clear_value_type<vector<i16>>( vector<i16> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i16>>( optional_vector<i16> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i16>>( idx_vector<i16> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i16>>( optional_idx_vector<i16> &type ) { type.reset(); }
template <> void clear_value_type<i32>( i32 &type ) { type = element_type_information<i32>::zero; }
template <> void clear_value_type<optional_value<i32>>( optional_value<i32> &type ) { type.reset(); }
template <> void clear_value_type<vector<i32>>( vector<i32> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i32>>( optional_vector<i32> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i32>>( idx_vector<i32> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i32>>( optional_idx_vector<i32> &type ) { type.reset(); }
template <> void clear_value_type<i64>( i64 &type ) { type = element_type_information<i64>::zero; }
template <> void clear_value_type<optional_value<i64>>( optional_value<i64> &type ) { type.reset(); }
template <> void clear_value_type<vector<i64>>( vector<i64> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i64>>( optional_vector<i64> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i64>>( idx_vector<i64> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i64>>( optional_idx_vector<i64> &type ) { type.reset(); }
template <> void clear_value_type<u8>( u8 &type ) { type = element_type_information<u8>::zero; }
template <> void clear_value_type<optional_value<u8>>( optional_value<u8> &type ) { type.reset(); }
template <> void clear_value_type<vector<u8>>( vector<u8> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u8>>( optional_vector<u8> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u8>>( idx_vector<u8> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u8>>( optional_idx_vector<u8> &type ) { type.reset(); }
template <> void clear_value_type<u16>( u16 &type ) { type = element_type_information<u16>::zero; }
template <> void clear_value_type<optional_value<u16>>( optional_value<u16> &type ) { type.reset(); }
template <> void clear_value_type<vector<u16>>( vector<u16> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u16>>( optional_vector<u16> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u16>>( idx_vector<u16> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u16>>( optional_idx_vector<u16> &type ) { type.reset(); }
template <> void clear_value_type<u32>( u32 &type ) { type = element_type_information<u32>::zero; }
template <> void clear_value_type<optional_value<u32>>( optional_value<u32> &type ) { type.reset(); }
template <> void clear_value_type<vector<u32>>( vector<u32> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u32>>( optional_vector<u32> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u32>>( idx_vector<u32> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u32>>( optional_idx_vector<u32> &type ) { type.reset(); }
template <> void clear_value_type<u64>( u64 &type ) { type = element_type_information<u64>::zero; }
template <> void clear_value_type<optional_value<u64>>( optional_value<u64> &type ) { type.reset(); }
template <> void clear_value_type<vector<u64>>( vector<u64> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u64>>( optional_vector<u64> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u64>>( idx_vector<u64> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u64>>( optional_idx_vector<u64> &type ) { type.reset(); }
template <> void clear_value_type<f32>( f32 &type ) { type = element_type_information<f32>::zero; }
template <> void clear_value_type<optional_value<f32>>( optional_value<f32> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32>>( vector<f32> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32>>( optional_vector<f32> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32>>( idx_vector<f32> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32>>( optional_idx_vector<f32> &type ) { type.reset(); }
template <> void clear_value_type<f64>( f64 &type ) { type = element_type_information<f64>::zero; }
template <> void clear_value_type<optional_value<f64>>( optional_value<f64> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64>>( vector<f64> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64>>( optional_vector<f64> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64>>( idx_vector<f64> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64>>( optional_idx_vector<f64> &type ) { type.reset(); }
template <> void clear_value_type<f32vec2>( f32vec2 &type ) { type = element_type_information<f32vec2>::zero; }
template <> void clear_value_type<optional_value<f32vec2>>( optional_value<f32vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32vec2>>( vector<f32vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32vec2>>( optional_vector<f32vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32vec2>>( idx_vector<f32vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32vec2>>( optional_idx_vector<f32vec2> &type ) { type.reset(); }
template <> void clear_value_type<f64vec2>( f64vec2 &type ) { type = element_type_information<f64vec2>::zero; }
template <> void clear_value_type<optional_value<f64vec2>>( optional_value<f64vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64vec2>>( vector<f64vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64vec2>>( optional_vector<f64vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64vec2>>( idx_vector<f64vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64vec2>>( optional_idx_vector<f64vec2> &type ) { type.reset(); }
template <> void clear_value_type<f32vec3>( f32vec3 &type ) { type = element_type_information<f32vec3>::zero; }
template <> void clear_value_type<optional_value<f32vec3>>( optional_value<f32vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32vec3>>( vector<f32vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32vec3>>( optional_vector<f32vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32vec3>>( idx_vector<f32vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32vec3>>( optional_idx_vector<f32vec3> &type ) { type.reset(); }
template <> void clear_value_type<f64vec3>( f64vec3 &type ) { type = element_type_information<f64vec3>::zero; }
template <> void clear_value_type<optional_value<f64vec3>>( optional_value<f64vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64vec3>>( vector<f64vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64vec3>>( optional_vector<f64vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64vec3>>( idx_vector<f64vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64vec3>>( optional_idx_vector<f64vec3> &type ) { type.reset(); }
template <> void clear_value_type<f32vec4>( f32vec4 &type ) { type = element_type_information<f32vec4>::zero; }
template <> void clear_value_type<optional_value<f32vec4>>( optional_value<f32vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32vec4>>( vector<f32vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32vec4>>( optional_vector<f32vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32vec4>>( idx_vector<f32vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32vec4>>( optional_idx_vector<f32vec4> &type ) { type.reset(); }
template <> void clear_value_type<f64vec4>( f64vec4 &type ) { type = element_type_information<f64vec4>::zero; }
template <> void clear_value_type<optional_value<f64vec4>>( optional_value<f64vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64vec4>>( vector<f64vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64vec4>>( optional_vector<f64vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64vec4>>( idx_vector<f64vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64vec4>>( optional_idx_vector<f64vec4> &type ) { type.reset(); }
template <> void clear_value_type<i8vec2>( i8vec2 &type ) { type = element_type_information<i8vec2>::zero; }
template <> void clear_value_type<optional_value<i8vec2>>( optional_value<i8vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<i8vec2>>( vector<i8vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i8vec2>>( optional_vector<i8vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i8vec2>>( idx_vector<i8vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i8vec2>>( optional_idx_vector<i8vec2> &type ) { type.reset(); }
template <> void clear_value_type<i16vec2>( i16vec2 &type ) { type = element_type_information<i16vec2>::zero; }
template <> void clear_value_type<optional_value<i16vec2>>( optional_value<i16vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<i16vec2>>( vector<i16vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i16vec2>>( optional_vector<i16vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i16vec2>>( idx_vector<i16vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i16vec2>>( optional_idx_vector<i16vec2> &type ) { type.reset(); }
template <> void clear_value_type<i32vec2>( i32vec2 &type ) { type = element_type_information<i32vec2>::zero; }
template <> void clear_value_type<optional_value<i32vec2>>( optional_value<i32vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<i32vec2>>( vector<i32vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i32vec2>>( optional_vector<i32vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i32vec2>>( idx_vector<i32vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i32vec2>>( optional_idx_vector<i32vec2> &type ) { type.reset(); }
template <> void clear_value_type<i64vec2>( i64vec2 &type ) { type = element_type_information<i64vec2>::zero; }
template <> void clear_value_type<optional_value<i64vec2>>( optional_value<i64vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<i64vec2>>( vector<i64vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i64vec2>>( optional_vector<i64vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i64vec2>>( idx_vector<i64vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i64vec2>>( optional_idx_vector<i64vec2> &type ) { type.reset(); }
template <> void clear_value_type<i8vec3>( i8vec3 &type ) { type = element_type_information<i8vec3>::zero; }
template <> void clear_value_type<optional_value<i8vec3>>( optional_value<i8vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<i8vec3>>( vector<i8vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i8vec3>>( optional_vector<i8vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i8vec3>>( idx_vector<i8vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i8vec3>>( optional_idx_vector<i8vec3> &type ) { type.reset(); }
template <> void clear_value_type<i16vec3>( i16vec3 &type ) { type = element_type_information<i16vec3>::zero; }
template <> void clear_value_type<optional_value<i16vec3>>( optional_value<i16vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<i16vec3>>( vector<i16vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i16vec3>>( optional_vector<i16vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i16vec3>>( idx_vector<i16vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i16vec3>>( optional_idx_vector<i16vec3> &type ) { type.reset(); }
template <> void clear_value_type<i32vec3>( i32vec3 &type ) { type = element_type_information<i32vec3>::zero; }
template <> void clear_value_type<optional_value<i32vec3>>( optional_value<i32vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<i32vec3>>( vector<i32vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i32vec3>>( optional_vector<i32vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i32vec3>>( idx_vector<i32vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i32vec3>>( optional_idx_vector<i32vec3> &type ) { type.reset(); }
template <> void clear_value_type<i64vec3>( i64vec3 &type ) { type = element_type_information<i64vec3>::zero; }
template <> void clear_value_type<optional_value<i64vec3>>( optional_value<i64vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<i64vec3>>( vector<i64vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i64vec3>>( optional_vector<i64vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i64vec3>>( idx_vector<i64vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i64vec3>>( optional_idx_vector<i64vec3> &type ) { type.reset(); }
template <> void clear_value_type<i8vec4>( i8vec4 &type ) { type = element_type_information<i8vec4>::zero; }
template <> void clear_value_type<optional_value<i8vec4>>( optional_value<i8vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<i8vec4>>( vector<i8vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i8vec4>>( optional_vector<i8vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i8vec4>>( idx_vector<i8vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i8vec4>>( optional_idx_vector<i8vec4> &type ) { type.reset(); }
template <> void clear_value_type<i16vec4>( i16vec4 &type ) { type = element_type_information<i16vec4>::zero; }
template <> void clear_value_type<optional_value<i16vec4>>( optional_value<i16vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<i16vec4>>( vector<i16vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i16vec4>>( optional_vector<i16vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i16vec4>>( idx_vector<i16vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i16vec4>>( optional_idx_vector<i16vec4> &type ) { type.reset(); }
template <> void clear_value_type<i32vec4>( i32vec4 &type ) { type = element_type_information<i32vec4>::zero; }
template <> void clear_value_type<optional_value<i32vec4>>( optional_value<i32vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<i32vec4>>( vector<i32vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i32vec4>>( optional_vector<i32vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i32vec4>>( idx_vector<i32vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i32vec4>>( optional_idx_vector<i32vec4> &type ) { type.reset(); }
template <> void clear_value_type<i64vec4>( i64vec4 &type ) { type = element_type_information<i64vec4>::zero; }
template <> void clear_value_type<optional_value<i64vec4>>( optional_value<i64vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<i64vec4>>( vector<i64vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<i64vec4>>( optional_vector<i64vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<i64vec4>>( idx_vector<i64vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<i64vec4>>( optional_idx_vector<i64vec4> &type ) { type.reset(); }
template <> void clear_value_type<u8vec2>( u8vec2 &type ) { type = element_type_information<u8vec2>::zero; }
template <> void clear_value_type<optional_value<u8vec2>>( optional_value<u8vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<u8vec2>>( vector<u8vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u8vec2>>( optional_vector<u8vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u8vec2>>( idx_vector<u8vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u8vec2>>( optional_idx_vector<u8vec2> &type ) { type.reset(); }
template <> void clear_value_type<u16vec2>( u16vec2 &type ) { type = element_type_information<u16vec2>::zero; }
template <> void clear_value_type<optional_value<u16vec2>>( optional_value<u16vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<u16vec2>>( vector<u16vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u16vec2>>( optional_vector<u16vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u16vec2>>( idx_vector<u16vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u16vec2>>( optional_idx_vector<u16vec2> &type ) { type.reset(); }
template <> void clear_value_type<u32vec2>( u32vec2 &type ) { type = element_type_information<u32vec2>::zero; }
template <> void clear_value_type<optional_value<u32vec2>>( optional_value<u32vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<u32vec2>>( vector<u32vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u32vec2>>( optional_vector<u32vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u32vec2>>( idx_vector<u32vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u32vec2>>( optional_idx_vector<u32vec2> &type ) { type.reset(); }
template <> void clear_value_type<u64vec2>( u64vec2 &type ) { type = element_type_information<u64vec2>::zero; }
template <> void clear_value_type<optional_value<u64vec2>>( optional_value<u64vec2> &type ) { type.reset(); }
template <> void clear_value_type<vector<u64vec2>>( vector<u64vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u64vec2>>( optional_vector<u64vec2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u64vec2>>( idx_vector<u64vec2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u64vec2>>( optional_idx_vector<u64vec2> &type ) { type.reset(); }
template <> void clear_value_type<u8vec3>( u8vec3 &type ) { type = element_type_information<u8vec3>::zero; }
template <> void clear_value_type<optional_value<u8vec3>>( optional_value<u8vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<u8vec3>>( vector<u8vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u8vec3>>( optional_vector<u8vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u8vec3>>( idx_vector<u8vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u8vec3>>( optional_idx_vector<u8vec3> &type ) { type.reset(); }
template <> void clear_value_type<u16vec3>( u16vec3 &type ) { type = element_type_information<u16vec3>::zero; }
template <> void clear_value_type<optional_value<u16vec3>>( optional_value<u16vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<u16vec3>>( vector<u16vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u16vec3>>( optional_vector<u16vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u16vec3>>( idx_vector<u16vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u16vec3>>( optional_idx_vector<u16vec3> &type ) { type.reset(); }
template <> void clear_value_type<u32vec3>( u32vec3 &type ) { type = element_type_information<u32vec3>::zero; }
template <> void clear_value_type<optional_value<u32vec3>>( optional_value<u32vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<u32vec3>>( vector<u32vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u32vec3>>( optional_vector<u32vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u32vec3>>( idx_vector<u32vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u32vec3>>( optional_idx_vector<u32vec3> &type ) { type.reset(); }
template <> void clear_value_type<u64vec3>( u64vec3 &type ) { type = element_type_information<u64vec3>::zero; }
template <> void clear_value_type<optional_value<u64vec3>>( optional_value<u64vec3> &type ) { type.reset(); }
template <> void clear_value_type<vector<u64vec3>>( vector<u64vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u64vec3>>( optional_vector<u64vec3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u64vec3>>( idx_vector<u64vec3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u64vec3>>( optional_idx_vector<u64vec3> &type ) { type.reset(); }
template <> void clear_value_type<u8vec4>( u8vec4 &type ) { type = element_type_information<u8vec4>::zero; }
template <> void clear_value_type<optional_value<u8vec4>>( optional_value<u8vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<u8vec4>>( vector<u8vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u8vec4>>( optional_vector<u8vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u8vec4>>( idx_vector<u8vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u8vec4>>( optional_idx_vector<u8vec4> &type ) { type.reset(); }
template <> void clear_value_type<u16vec4>( u16vec4 &type ) { type = element_type_information<u16vec4>::zero; }
template <> void clear_value_type<optional_value<u16vec4>>( optional_value<u16vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<u16vec4>>( vector<u16vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u16vec4>>( optional_vector<u16vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u16vec4>>( idx_vector<u16vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u16vec4>>( optional_idx_vector<u16vec4> &type ) { type.reset(); }
template <> void clear_value_type<u32vec4>( u32vec4 &type ) { type = element_type_information<u32vec4>::zero; }
template <> void clear_value_type<optional_value<u32vec4>>( optional_value<u32vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<u32vec4>>( vector<u32vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u32vec4>>( optional_vector<u32vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u32vec4>>( idx_vector<u32vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u32vec4>>( optional_idx_vector<u32vec4> &type ) { type.reset(); }
template <> void clear_value_type<u64vec4>( u64vec4 &type ) { type = element_type_information<u64vec4>::zero; }
template <> void clear_value_type<optional_value<u64vec4>>( optional_value<u64vec4> &type ) { type.reset(); }
template <> void clear_value_type<vector<u64vec4>>( vector<u64vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<u64vec4>>( optional_vector<u64vec4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<u64vec4>>( idx_vector<u64vec4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<u64vec4>>( optional_idx_vector<u64vec4> &type ) { type.reset(); }
template <> void clear_value_type<f32mat2>( f32mat2 &type ) { type = element_type_information<f32mat2>::zero; }
template <> void clear_value_type<optional_value<f32mat2>>( optional_value<f32mat2> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32mat2>>( vector<f32mat2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32mat2>>( optional_vector<f32mat2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32mat2>>( idx_vector<f32mat2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32mat2>>( optional_idx_vector<f32mat2> &type ) { type.reset(); }
template <> void clear_value_type<f64mat2>( f64mat2 &type ) { type = element_type_information<f64mat2>::zero; }
template <> void clear_value_type<optional_value<f64mat2>>( optional_value<f64mat2> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64mat2>>( vector<f64mat2> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64mat2>>( optional_vector<f64mat2> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64mat2>>( idx_vector<f64mat2> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64mat2>>( optional_idx_vector<f64mat2> &type ) { type.reset(); }
template <> void clear_value_type<f32mat3>( f32mat3 &type ) { type = element_type_information<f32mat3>::zero; }
template <> void clear_value_type<optional_value<f32mat3>>( optional_value<f32mat3> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32mat3>>( vector<f32mat3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32mat3>>( optional_vector<f32mat3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32mat3>>( idx_vector<f32mat3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32mat3>>( optional_idx_vector<f32mat3> &type ) { type.reset(); }
template <> void clear_value_type<f64mat3>( f64mat3 &type ) { type = element_type_information<f64mat3>::zero; }
template <> void clear_value_type<optional_value<f64mat3>>( optional_value<f64mat3> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64mat3>>( vector<f64mat3> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64mat3>>( optional_vector<f64mat3> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64mat3>>( idx_vector<f64mat3> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64mat3>>( optional_idx_vector<f64mat3> &type ) { type.reset(); }
template <> void clear_value_type<f32mat4>( f32mat4 &type ) { type = element_type_information<f32mat4>::zero; }
template <> void clear_value_type<optional_value<f32mat4>>( optional_value<f32mat4> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32mat4>>( vector<f32mat4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32mat4>>( optional_vector<f32mat4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32mat4>>( idx_vector<f32mat4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32mat4>>( optional_idx_vector<f32mat4> &type ) { type.reset(); }
template <> void clear_value_type<f64mat4>( f64mat4 &type ) { type = element_type_information<f64mat4>::zero; }
template <> void clear_value_type<optional_value<f64mat4>>( optional_value<f64mat4> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64mat4>>( vector<f64mat4> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64mat4>>( optional_vector<f64mat4> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64mat4>>( idx_vector<f64mat4> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64mat4>>( optional_idx_vector<f64mat4> &type ) { type.reset(); }
template <> void clear_value_type<f32quat>( f32quat &type ) { type = element_type_information<f32quat>::zero; }
template <> void clear_value_type<optional_value<f32quat>>( optional_value<f32quat> &type ) { type.reset(); }
template <> void clear_value_type<vector<f32quat>>( vector<f32quat> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f32quat>>( optional_vector<f32quat> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f32quat>>( idx_vector<f32quat> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f32quat>>( optional_idx_vector<f32quat> &type ) { type.reset(); }
template <> void clear_value_type<f64quat>( f64quat &type ) { type = element_type_information<f64quat>::zero; }
template <> void clear_value_type<optional_value<f64quat>>( optional_value<f64quat> &type ) { type.reset(); }
template <> void clear_value_type<vector<f64quat>>( vector<f64quat> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<f64quat>>( optional_vector<f64quat> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<f64quat>>( idx_vector<f64quat> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<f64quat>>( optional_idx_vector<f64quat> &type ) { type.reset(); }
template <> void clear_value_type<uuid>( uuid &type ) { type = element_type_information<uuid>::zero; }
template <> void clear_value_type<optional_value<uuid>>( optional_value<uuid> &type ) { type.reset(); }
template <> void clear_value_type<vector<uuid>>( vector<uuid> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<uuid>>( optional_vector<uuid> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<uuid>>( idx_vector<uuid> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<uuid>>( optional_idx_vector<uuid> &type ) { type.reset(); }
template <> void clear_value_type<item_ref>( item_ref &type ) { type = element_type_information<item_ref>::zero; }
template <> void clear_value_type<optional_value<item_ref>>( optional_value<item_ref> &type ) { type.reset(); }
template <> void clear_value_type<vector<item_ref>>( vector<item_ref> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<item_ref>>( optional_vector<item_ref> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<item_ref>>( idx_vector<item_ref> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<item_ref>>( optional_idx_vector<item_ref> &type ) { type.reset(); }
template <> void clear_value_type<hash>( hash &type ) { type = element_type_information<hash>::zero; }
template <> void clear_value_type<optional_value<hash>>( optional_value<hash> &type ) { type.reset(); }
template <> void clear_value_type<vector<hash>>( vector<hash> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<hash>>( optional_vector<hash> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<hash>>( idx_vector<hash> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<hash>>( optional_idx_vector<hash> &type ) { type.reset(); }
template <> void clear_value_type<entity_ref>( entity_ref &type ) { type = element_type_information<entity_ref>::zero; }
template <> void clear_value_type<optional_value<entity_ref>>( optional_value<entity_ref> &type ) { type.reset(); }
template <> void clear_value_type<vector<entity_ref>>( vector<entity_ref> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<entity_ref>>( optional_vector<entity_ref> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<entity_ref>>( idx_vector<entity_ref> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<entity_ref>>( optional_idx_vector<entity_ref> &type ) { type.reset(); }
template <> void clear_value_type<string>( string &type ) { type = element_type_information<string>::zero; }
template <> void clear_value_type<optional_value<string>>( optional_value<string> &type ) { type.reset(); }
template <> void clear_value_type<vector<string>>( vector<string> &type ) { type.clear(); }
template <> void clear_value_type<optional_vector<string>>( optional_vector<string> &type ) { type.reset(); }
template <> void clear_value_type<idx_vector<string>>( idx_vector<string> &type ) { type.clear(); }
template <> void clear_value_type<optional_idx_vector<string>>( optional_idx_vector<string> &type ) { type.reset(); }
}
