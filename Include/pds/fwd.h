// WARNING! DO NOT EDIT THIS FILE! This file is generated.

// Generated by pds - Persistent data structure framework, Copyright (c) 2022 Ulrik Lindahl
// Generator code licensed under the MIT license https://github.com/Cooolrik/pds/blob/main/LICENSE

#pragma once
#ifndef __PDS__FWD_H__
#define __PDS__FWD_H__

// fwd.h - Forward declaration of types used in pds

#include <limits.h>
#include <float.h>
#include <string>
#include <vector>
#include <ctle/fwd.h>

namespace pds
{

// scalar types
typedef std::int8_t i8;
typedef std::int16_t i16;
typedef std::int32_t i32;
typedef std::int64_t i64;
typedef std::uint8_t u8;
typedef std::uint16_t u16;
typedef std::uint32_t u32;
typedef std::uint64_t u64;
typedef float f32;
typedef double f64;

using std::string;

using ctle::status;
using ctle::uuid;
using hash = ctle::digest<256>;

// integer vector types
typedef ctle::n_tup<i8,2> i8vec2;
typedef ctle::n_tup<i8,3> i8vec3;
typedef ctle::n_tup<i8,4> i8vec4;
typedef ctle::n_tup<i16,2> i16vec2;
typedef ctle::n_tup<i16,3> i16vec3;
typedef ctle::n_tup<i16,4> i16vec4;
typedef ctle::n_tup<i32,2> i32vec2;
typedef ctle::n_tup<i32,3> i32vec3;
typedef ctle::n_tup<i32,4> i32vec4;
typedef ctle::n_tup<i64,2> i64vec2;
typedef ctle::n_tup<i64,3> i64vec3;
typedef ctle::n_tup<i64,4> i64vec4;

typedef ctle::n_tup<u8,2> u8vec2;
typedef ctle::n_tup<u8,3> u8vec3;
typedef ctle::n_tup<u8,4> u8vec4;
typedef ctle::n_tup<u16,2> u16vec2;
typedef ctle::n_tup<u16,3> u16vec3;
typedef ctle::n_tup<u16,4> u16vec4;
typedef ctle::n_tup<u32,2> u32vec2;
typedef ctle::n_tup<u32,3> u32vec3;
typedef ctle::n_tup<u32,4> u32vec4;
typedef ctle::n_tup<u64,2> u64vec2;
typedef ctle::n_tup<u64,3> u64vec3;
typedef ctle::n_tup<u64,4> u64vec4;

// float vector types
typedef ctle::n_tup<f32,2> f32vec2;
typedef ctle::n_tup<f32,3> f32vec3;
typedef ctle::n_tup<f32,4> f32vec4;
typedef ctle::n_tup<f64,2> f64vec2;
typedef ctle::n_tup<f64,3> f64vec3;
typedef ctle::n_tup<f64,4> f64vec4;

// float matrix types
typedef ctle::mn_tup<f32,2,2> f32mat2;
typedef ctle::mn_tup<f32,3,3> f32mat3;
typedef ctle::mn_tup<f32,4,4> f32mat4;
typedef ctle::mn_tup<f64,2,2> f64mat2;
typedef ctle::mn_tup<f64,3,3> f64mat3;
typedef ctle::mn_tup<f64,4,4> f64mat4;

// quaternion types
class f32quat;
class f64quat;

// item and entity references
class item_ref;
class entity_ref;

// shorthand for commonly used types
typedef u32 uint;
typedef i32vec2 ivec2;
typedef i32vec3 ivec3;
typedef i32vec4 ivec4;
typedef u32vec2 uvec2;
typedef u32vec3 uvec3;
typedef u32vec4 uvec4;
typedef f32vec2 vec2;
typedef f32vec3 vec3;
typedef f32vec4 vec4;
typedef f32mat2 mat2;
typedef f32mat3 mat3;
typedef f32mat4 mat4;

// container types
using std::vector;
using ctle::idx_vector;
using ctle::optional_idx_vector;
using ctle::optional_value;
using ctle::optional_vector;

// @brief element_type_information stores information on the element types in pds
template <class _Ty> struct element_type_information;

// @brief value_type_information stores information on the value types in pds, which is a combination of element types with containers
template <class _Ty> struct value_type_information;

}
// namespace pds

#endif//__PDS__FWD_H__
